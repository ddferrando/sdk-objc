#import "DRCTSFilesApi.h"
#import "DRCTSQueryParamCollection.h"
#import "DRCTSApiClient.h"
#import "DRCTSGetFile.h"
#import "DRCTSGetFiles.h"


@interface DRCTSFilesApi ()

@property (nonatomic, strong, readwrite) NSMutableDictionary *mutableDefaultHeaders;

@end

@implementation DRCTSFilesApi

NSString* kDRCTSFilesApiErrorDomain = @"DRCTSFilesApiErrorDomain";
NSInteger kDRCTSFilesApiMissingParamErrorCode = 234513;

@synthesize apiClient = _apiClient;

#pragma mark - Initialize methods

- (instancetype) init {
    return [self initWithApiClient:[DRCTSApiClient sharedClient]];
}


-(instancetype) initWithApiClient:(DRCTSApiClient *)apiClient {
    self = [super init];
    if (self) {
        _apiClient = apiClient;
        _mutableDefaultHeaders = [NSMutableDictionary dictionary];
    }
    return self;
}

#pragma mark -

-(NSString*) defaultHeaderForKey:(NSString*)key {
    return self.mutableDefaultHeaders[key];
}

-(void) setDefaultHeaderValue:(NSString*) value forKey:(NSString*)key {
    [self.mutableDefaultHeaders setValue:value forKey:key];
}

-(NSDictionary *)defaultHeaders {
    return self.mutableDefaultHeaders;
}

#pragma mark - Api Methods

///
/// Creates file
/// 
///  @param data The file's Base64 content (optional)
///
///  @param active The file's status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)
///
///  @param name The name used in the filesystem, including the extension, eg: \"my-file.jpg\". This is generated by the system based on Global Settings (optional)
///
///  @param title The file's title (optional)
///
///  @param location Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)
///
///  @param type The file's mime type (optional)
///
///  @param tags A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)
///
///  @param caption The file's caption or description. Pulled from the IPTC description when available (optional)
///
///  @returns void
///
-(NSURLSessionTask*) createFileWithData: (NSString*) data
    active: (NSNumber*) active
    name: (NSString*) name
    title: (NSString*) title
    location: (NSString*) location
    type: (NSString*) type
    tags: (NSString*) tags
    caption: (NSString*) caption
    completionHandler: (void (^)(NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/files"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[@"application/x-www-form-urlencoded"]];

    // Authentication setting
    NSArray *authSettings = @[@"api_key"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];
    if (data) {
        formParams[@"data"] = data;
    }
    if (active) {
        formParams[@"active"] = active;
    }
    if (name) {
        formParams[@"name"] = name;
    }
    if (title) {
        formParams[@"title"] = title;
    }
    if (location) {
        formParams[@"location"] = location;
    }
    if (type) {
        formParams[@"type"] = type;
    }
    if (tags) {
        formParams[@"tags"] = tags;
    }
    if (caption) {
        formParams[@"caption"] = caption;
    }

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: nil
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler(error);
                                }
                            }];
}

///
/// Returns specific file by id
/// 
///  @param fileId ID of file to get 
///
///  @returns DRCTSGetFile*
///
-(NSURLSessionTask*) getFileWithFileId: (NSNumber*) fileId
    completionHandler: (void (^)(DRCTSGetFile* output, NSError* error)) handler {
    // verify the required parameter 'fileId' is set
    if (fileId == nil) {
        NSParameterAssert(fileId);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"fileId"] };
            NSError* error = [NSError errorWithDomain:kDRCTSFilesApiErrorDomain code:kDRCTSFilesApiMissingParamErrorCode userInfo:userInfo];
            handler(nil, error);
        }
        return nil;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/files/{fileId}"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];
    if (fileId != nil) {
        pathParams[@"fileId"] = fileId;
    }

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"api_key"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"GET"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"DRCTSGetFile*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((DRCTSGetFile*)data, error);
                                }
                            }];
}

///
/// Returns files
/// 
///  @returns DRCTSGetFiles*
///
-(NSURLSessionTask*) getFilesWithCompletionHandler: 
    (void (^)(DRCTSGetFiles* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/files"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"api_key"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"GET"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"DRCTSGetFiles*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((DRCTSGetFiles*)data, error);
                                }
                            }];
}

///
/// Creates file
/// 
///  @param fileId ID of file to get 
///
///  @param data The file's Base64 content (optional)
///
///  @param active The file's status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)
///
///  @param name The name used in the filesystem, including the extension, eg: \"my-file.jpg\". This is generated by the system based on Global Settings (optional)
///
///  @param title The file's title (optional)
///
///  @param location Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)
///
///  @param type The file's mime type (optional)
///
///  @param tags A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)
///
///  @param caption The file's caption or description. Pulled from the IPTC description when available (optional)
///
///  @param url File url relativity to Directus base url (optional)
///
///  @param width File width (optional)
///
///  @param height File height (optional)
///
///  @param size File size in bytes (optional)
///
///  @param embedId ID of the embedded file. Ex Youtube ID (optional)
///
///  @param user File owner (who uploaded the file) (optional)
///
///  @param dateUploaded File uploaded date. TODO It should be an DateTime object (optional)
///
///  @param storageAdapter Storage adapter used to upload the file (optional)
///
///  @returns void
///
-(NSURLSessionTask*) updateFileWithFileId: (NSNumber*) fileId
    data: (NSString*) data
    active: (NSNumber*) active
    name: (NSString*) name
    title: (NSString*) title
    location: (NSString*) location
    type: (NSString*) type
    tags: (NSString*) tags
    caption: (NSString*) caption
    url: (NSString*) url
    width: (NSNumber*) width
    height: (NSNumber*) height
    size: (NSNumber*) size
    embedId: (NSString*) embedId
    user: (NSNumber*) user
    dateUploaded: (NSString*) dateUploaded
    storageAdapter: (NSString*) storageAdapter
    completionHandler: (void (^)(NSError* error)) handler {
    // verify the required parameter 'fileId' is set
    if (fileId == nil) {
        NSParameterAssert(fileId);
        if(handler) {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"fileId"] };
            NSError* error = [NSError errorWithDomain:kDRCTSFilesApiErrorDomain code:kDRCTSFilesApiMissingParamErrorCode userInfo:userInfo];
            handler(error);
        }
        return nil;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/files/{fileId}"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];
    if (fileId != nil) {
        pathParams[@"fileId"] = fileId;
    }

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[@"application/x-www-form-urlencoded"]];

    // Authentication setting
    NSArray *authSettings = @[@"api_key"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];
    if (data) {
        formParams[@"data"] = data;
    }
    if (active) {
        formParams[@"active"] = active;
    }
    if (name) {
        formParams[@"name"] = name;
    }
    if (title) {
        formParams[@"title"] = title;
    }
    if (location) {
        formParams[@"location"] = location;
    }
    if (type) {
        formParams[@"type"] = type;
    }
    if (tags) {
        formParams[@"tags"] = tags;
    }
    if (caption) {
        formParams[@"caption"] = caption;
    }
    if (url) {
        formParams[@"url"] = url;
    }
    if (width) {
        formParams[@"width"] = width;
    }
    if (height) {
        formParams[@"height"] = height;
    }
    if (size) {
        formParams[@"size"] = size;
    }
    if (embedId) {
        formParams[@"embed_id"] = embedId;
    }
    if (user) {
        formParams[@"user"] = user;
    }
    if (dateUploaded) {
        formParams[@"date_uploaded"] = dateUploaded;
    }
    if (storageAdapter) {
        formParams[@"storage_adapter"] = storageAdapter;
    }

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"PUT"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: nil
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler(error);
                                }
                            }];
}



@end
