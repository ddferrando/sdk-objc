#import <Foundation/Foundation.h>
#import "DRCTSGetTable.h"
#import "DRCTSGetTableColumn.h"
#import "DRCTSGetTableColumns.h"
#import "DRCTSGetTableRow.h"
#import "DRCTSGetTableRows.h"
#import "DRCTSGetTables.h"
#import "DRCTSApi.h"

/**
* directus.io
* API for directus.io
*
* OpenAPI spec version: 1.1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface DRCTSTablesApi: NSObject <DRCTSApi>

extern NSString* kDRCTSTablesApiErrorDomain;
extern NSInteger kDRCTSTablesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(DRCTSApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Create a column in a given table
/// 
///
/// @param tableId ID of table to return rows from
/// @param tableName Name of table to add (optional)
/// @param columnName The unique name of the column to create (optional)
/// @param type The datatype of the column, eg: INT (optional)
/// @param ui The Directus Interface to use for this column (optional)
/// @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
/// @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
/// @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
/// @param sort The sort order of the column used to override the column order in the schema (optional)
/// @param comment A helpful note to users for this column (optional)
/// @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
/// @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
/// @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
/// @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
/// @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
/// 
///  code:200 message:"Add complete"
///
/// @return void
-(NSURLSessionTask*) addColumnWithTableId: (NSString*) tableId
    tableName: (NSString*) tableName
    columnName: (NSString*) columnName
    type: (NSString*) type
    ui: (NSString*) ui
    hiddenInput: (NSNumber*) hiddenInput
    hiddenList: (NSNumber*) hiddenList
    required: (NSNumber*) required
    sort: (NSNumber*) sort
    comment: (NSString*) comment
    relationshipType: (NSString*) relationshipType
    relatedTable: (NSString*) relatedTable
    junctionTable: (NSString*) junctionTable
    junctionKeyLeft: (NSString*) junctionKeyLeft
    junctionKeyRight: (NSString*) junctionKeyRight
    completionHandler: (void (^)(NSError* error)) handler;


/// Add a new row
/// 
///
/// @param tableId ID of table to return rows from
/// @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum
/// 
///  code:200 message:"Add complete"
///
/// @return void
-(NSURLSessionTask*) addRowWithTableId: (NSString*) tableId
    customData: (NSString*) customData
    completionHandler: (void (^)(NSError* error)) handler;


/// Add a new table
/// 
///
/// @param name Name of table to add (optional)
/// 
///  code:200 message:"Add complete"
///
/// @return void
-(NSURLSessionTask*) addTableWithName: (NSString*) name
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete row
/// 
///
/// @param tableId ID of table to return rows from
/// @param columnName Name of column to return
/// 
///  code:200 message:"Delete complete"
///
/// @return void
-(NSURLSessionTask*) deleteColumnWithTableId: (NSString*) tableId
    columnName: (NSString*) columnName
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete row
/// 
///
/// @param tableId ID of table to return rows from
/// @param rowId ID of row to return from rows
/// 
///  code:200 message:"Delete complete"
///
/// @return void
-(NSURLSessionTask*) deleteRowWithTableId: (NSString*) tableId
    rowId: (NSNumber*) rowId
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete Table
/// 
///
/// @param tableId ID of table to return rows from
/// 
///  code:200 message:"Delete complete"
///
/// @return void
-(NSURLSessionTask*) deleteTableWithTableId: (NSString*) tableId
    completionHandler: (void (^)(NSError* error)) handler;


/// Returns specific table
/// 
///
/// @param tableId ID of table to return rows from
/// 
///  code:200 message:"rows"
///
/// @return DRCTSGetTable*
-(NSURLSessionTask*) getTableWithTableId: (NSString*) tableId
    completionHandler: (void (^)(DRCTSGetTable* output, NSError* error)) handler;


/// Returns specific table column
/// 
///
/// @param tableId ID of table to return rows from
/// @param columnName Name of column to return
/// 
///  code:200 message:"row object"
///
/// @return DRCTSGetTableColumn*
-(NSURLSessionTask*) getTableColumnWithTableId: (NSString*) tableId
    columnName: (NSString*) columnName
    completionHandler: (void (^)(DRCTSGetTableColumn* output, NSError* error)) handler;


/// Returns table columns
/// 
///
/// @param tableId ID of table to return rows from
/// 
///  code:200 message:"columns object"
///
/// @return DRCTSGetTableColumns*
-(NSURLSessionTask*) getTableColumnsWithTableId: (NSString*) tableId
    completionHandler: (void (^)(DRCTSGetTableColumns* output, NSError* error)) handler;


/// Returns specific table row
/// 
///
/// @param tableId ID of table to return rows from
/// @param rowId ID of row to return from rows
/// 
///  code:200 message:"row object"
///
/// @return DRCTSGetTableRow*
-(NSURLSessionTask*) getTableRowWithTableId: (NSString*) tableId
    rowId: (NSNumber*) rowId
    completionHandler: (void (^)(DRCTSGetTableRow* output, NSError* error)) handler;


/// Returns table rows
/// 
///
/// @param tableId ID of table to return rows from
/// 
///  code:200 message:"rows"
///
/// @return DRCTSGetTableRows*
-(NSURLSessionTask*) getTableRowsWithTableId: (NSString*) tableId
    completionHandler: (void (^)(DRCTSGetTableRows* output, NSError* error)) handler;


/// Returns tables
/// 
///
/// 
///  code:200 message:"array of tables"
///
/// @return DRCTSGetTables*
-(NSURLSessionTask*) getTablesWithCompletionHandler: 
    (void (^)(DRCTSGetTables* output, NSError* error)) handler;


/// Update column
/// 
///
/// @param tableId ID of table to return rows from
/// @param columnName Name of column to return
/// @param dataType The datatype of the column, eg: INT (optional)
/// @param ui The Directus Interface to use for this column (optional)
/// @param hiddenInput Whether the column will be hidden (globally) on the Edit Item page (optional)
/// @param hiddenList Whether the column will be hidden (globally) on the Item Listing page (optional)
/// @param required Whether the column is required. If required, the interface&#39;s validation function will be triggered (optional)
/// @param sort The sort order of the column used to override the column order in the schema (optional)
/// @param comment A helpful note to users for this column (optional)
/// @param relationshipType The column&#39;s relationship type (only used when storing relational data) eg: ONETOMANY, MANYTOMANY or MANYTOONE (optional)
/// @param relatedTable The table name this column is related to (only used when storing relational data) (optional)
/// @param junctionTable The pivot/junction table that joins the column&#39;s table with the related table (only used when storing relational data) (optional)
/// @param junctionKeyLeft The column name in junction that is related to the column&#39;s table (only used when storing relational data) (optional)
/// @param junctionKeyRight The column name in junction that is related to the related table (only used when storing relational data) (optional)
/// 
///  code:200 message:"Update complete"
///
/// @return void
-(NSURLSessionTask*) updateColumnWithTableId: (NSString*) tableId
    columnName: (NSString*) columnName
    dataType: (NSString*) dataType
    ui: (NSString*) ui
    hiddenInput: (NSNumber*) hiddenInput
    hiddenList: (NSNumber*) hiddenList
    required: (NSNumber*) required
    sort: (NSNumber*) sort
    comment: (NSString*) comment
    relationshipType: (NSString*) relationshipType
    relatedTable: (NSString*) relatedTable
    junctionTable: (NSString*) junctionTable
    junctionKeyLeft: (NSString*) junctionKeyLeft
    junctionKeyRight: (NSString*) junctionKeyRight
    completionHandler: (void (^)(NSError* error)) handler;


/// Update row
/// 
///
/// @param tableId ID of table to return rows from
/// @param rowId ID of row to return from rows
/// @param customData Data based on your specific schema eg: active&#x3D;1&amp;title&#x3D;LoremIpsum
/// 
///  code:200 message:"Update complete"
///
/// @return void
-(NSURLSessionTask*) updateRowWithTableId: (NSString*) tableId
    rowId: (NSNumber*) rowId
    customData: (NSString*) customData
    completionHandler: (void (^)(NSError* error)) handler;



@end
