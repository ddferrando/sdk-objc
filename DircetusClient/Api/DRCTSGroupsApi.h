#import <Foundation/Foundation.h>
#import "DRCTSGetGroup.h"
#import "DRCTSGetGroups.h"
#import "DRCTSGetPrivileges.h"
#import "DRCTSGetPrivilegesForTable.h"
#import "DRCTSApi.h"

/**
* directus.io
* API for directus.io
*
* OpenAPI spec version: 1.1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface DRCTSGroupsApi: NSObject <DRCTSApi>

extern NSString* kDRCTSGroupsApiErrorDomain;
extern NSInteger kDRCTSGroupsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(DRCTSApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a new group
/// 
///
/// @param name Name of group to add (optional)
/// 
///  code:200 message:"Add complete"
///
/// @return void
-(NSURLSessionTask*) addGroupWithName: (NSString*) name
    completionHandler: (void (^)(NSError* error)) handler;


/// Create new table privileges for the specified user group
/// 
///
/// @param groupId ID of group to return
/// @param _id Privilege&#39;s Unique Identification number (optional)
/// @param tableName Name of table to add (optional)
/// @param allowAdd Permission to add/create entries in the table (See values below) (optional)
/// @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
/// @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
/// @param allowView Permission to view/read entries in the table (See values below) (optional)
/// @param allowAlter Permission to add/create entries in the table (See values below) (optional)
/// @param navListed If the table should be visible in the sidebar for this user group (optional)
/// @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
/// @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
/// @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
/// 
///  code:200 message:"Add complete"
///
/// @return void
-(NSURLSessionTask*) addPrivilegeWithGroupId: (NSString*) groupId
    _id: (NSNumber*) _id
    tableName: (NSString*) tableName
    allowAdd: (NSNumber*) allowAdd
    allowEdit: (NSNumber*) allowEdit
    allowDelete: (NSNumber*) allowDelete
    allowView: (NSNumber*) allowView
    allowAlter: (NSNumber*) allowAlter
    navListed: (NSNumber*) navListed
    readFieldBlacklist: (NSString*) readFieldBlacklist
    writeFieldBlacklist: (NSString*) writeFieldBlacklist
    statusId: (NSString*) statusId
    completionHandler: (void (^)(NSError* error)) handler;


/// Returns specific group
/// 
///
/// @param groupId ID of group to return
/// 
///  code:200 message:"group object"
///
/// @return DRCTSGetGroup*
-(NSURLSessionTask*) getGroupWithGroupId: (NSString*) groupId
    completionHandler: (void (^)(DRCTSGetGroup* output, NSError* error)) handler;


/// Returns groups
/// 
///
/// 
///  code:200 message:"groups object"
///
/// @return DRCTSGetGroups*
-(NSURLSessionTask*) getGroupsWithCompletionHandler: 
    (void (^)(DRCTSGetGroups* output, NSError* error)) handler;


/// Returns group privileges
/// 
///
/// @param groupId ID of group to return
/// 
///  code:200 message:"group object"
///
/// @return DRCTSGetPrivileges*
-(NSURLSessionTask*) getPrivilegesWithGroupId: (NSString*) groupId
    completionHandler: (void (^)(DRCTSGetPrivileges* output, NSError* error)) handler;


/// Returns group privileges by tableName
/// 
///
/// @param groupId ID of group to return
/// @param tableNameOrPrivilegeId ID of privileges or Table Name to use
/// 
///  code:200 message:"group object"
///
/// @return DRCTSGetPrivilegesForTable*
-(NSURLSessionTask*) getPrivilegesForTableWithGroupId: (NSString*) groupId
    tableNameOrPrivilegeId: (NSString*) tableNameOrPrivilegeId
    completionHandler: (void (^)(DRCTSGetPrivilegesForTable* output, NSError* error)) handler;


/// Update privileges by privilegeId
/// 
///
/// @param groupId ID of group to return
/// @param tableNameOrPrivilegeId ID of privileges or Table Name to use
/// @param privilegesId ubique privilege ID (optional)
/// @param groupId2 ID of group to return (optional)
/// @param tableName Name of table to add (optional)
/// @param allowAdd Permission to add/create entries in the table (See values below) (optional)
/// @param allowEdit Permission to edit/update entries in the table (See values below) (optional)
/// @param allowDelete Permission to delete/remove entries in the table (See values below) (optional)
/// @param allowView Permission to view/read entries in the table (See values below) (optional)
/// @param allowAlter Permission to add/create entries in the table (See values below) (optional)
/// @param navListed If the table should be visible in the sidebar for this user group (optional)
/// @param readFieldBlacklist A CSV of column names that the group can&#39;t view (read) (optional)
/// @param writeFieldBlacklist A CSV of column names that the group can&#39;t edit (update) (optional)
/// @param statusId State of the record that this permissions belongs to (Draft, Active or Soft Deleted) (optional)
/// 
///  code:200 message:"group object"
///
/// @return void
-(NSURLSessionTask*) updatePrivilegesWithGroupId: (NSString*) groupId
    tableNameOrPrivilegeId: (NSString*) tableNameOrPrivilegeId
    privilegesId: (NSString*) privilegesId
    groupId2: (NSString*) groupId2
    tableName: (NSString*) tableName
    allowAdd: (NSNumber*) allowAdd
    allowEdit: (NSNumber*) allowEdit
    allowDelete: (NSNumber*) allowDelete
    allowView: (NSNumber*) allowView
    allowAlter: (NSNumber*) allowAlter
    navListed: (NSNumber*) navListed
    readFieldBlacklist: (NSString*) readFieldBlacklist
    writeFieldBlacklist: (NSString*) writeFieldBlacklist
    statusId: (NSString*) statusId
    completionHandler: (void (^)(NSError* error)) handler;



@end
