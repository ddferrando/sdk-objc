#import <Foundation/Foundation.h>
#import "DRCTSGetFile.h"
#import "DRCTSGetFiles.h"
#import "DRCTSApi.h"

/**
* directus.io
* API for directus.io
*
* OpenAPI spec version: 1.1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface DRCTSFilesApi: NSObject <DRCTSApi>

extern NSString* kDRCTSFilesApiErrorDomain;
extern NSInteger kDRCTSFilesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(DRCTSApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Creates file
/// 
///
/// @param data The file&#39;s Base64 content (optional)
/// @param active The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)
/// @param name The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)
/// @param title The file&#39;s title (optional)
/// @param location Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)
/// @param type The file&#39;s mime type (optional)
/// @param tags A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)
/// @param caption The file&#39;s caption or description. Pulled from the IPTC description when available (optional)
/// 
///  code:200 message:"create complete"
///
/// @return void
-(NSURLSessionTask*) createFileWithData: (NSString*) data
    active: (NSNumber*) active
    name: (NSString*) name
    title: (NSString*) title
    location: (NSString*) location
    type: (NSString*) type
    tags: (NSString*) tags
    caption: (NSString*) caption
    completionHandler: (void (^)(NSError* error)) handler;


/// Returns specific file by id
/// 
///
/// @param fileId ID of file to get
/// 
///  code:200 message:"file object"
///
/// @return DRCTSGetFile*
-(NSURLSessionTask*) getFileWithFileId: (NSNumber*) fileId
    completionHandler: (void (^)(DRCTSGetFile* output, NSError* error)) handler;


/// Returns files
/// 
///
/// 
///  code:200 message:"files object"
///
/// @return DRCTSGetFiles*
-(NSURLSessionTask*) getFilesWithCompletionHandler: 
    (void (^)(DRCTSGetFiles* output, NSError* error)) handler;


/// Creates file
/// 
///
/// @param fileId ID of file to get
/// @param data The file&#39;s Base64 content (optional)
/// @param active The file&#39;s status, default options are: 1 (active), 2 (inactive), 0 (deleted) (optional)
/// @param name The name used in the filesystem, including the extension, eg: \&quot;my-file.jpg\&quot;. This is generated by the system based on Global Settings (optional)
/// @param title The file&#39;s title (optional)
/// @param location Location of where the picture was taken, if any. Pulled from the IPTC location when available (optional)
/// @param type The file&#39;s mime type (optional)
/// @param tags A CSV of tags for this file. Pulled from the IPTC keywords when available (optional)
/// @param caption The file&#39;s caption or description. Pulled from the IPTC description when available (optional)
/// @param url File url relativity to Directus base url (optional)
/// @param width File width (optional)
/// @param height File height (optional)
/// @param size File size in bytes (optional)
/// @param embedId ID of the embedded file. Ex Youtube ID (optional)
/// @param user File owner (who uploaded the file) (optional)
/// @param dateUploaded File uploaded date. TODO It should be an DateTime object (optional)
/// @param storageAdapter Storage adapter used to upload the file (optional)
/// 
///  code:200 message:"create complete"
///
/// @return void
-(NSURLSessionTask*) updateFileWithFileId: (NSNumber*) fileId
    data: (NSString*) data
    active: (NSNumber*) active
    name: (NSString*) name
    title: (NSString*) title
    location: (NSString*) location
    type: (NSString*) type
    tags: (NSString*) tags
    caption: (NSString*) caption
    url: (NSString*) url
    width: (NSNumber*) width
    height: (NSNumber*) height
    size: (NSNumber*) size
    embedId: (NSString*) embedId
    user: (NSNumber*) user
    dateUploaded: (NSString*) dateUploaded
    storageAdapter: (NSString*) storageAdapter
    completionHandler: (void (^)(NSError* error)) handler;



@end
