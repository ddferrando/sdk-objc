

#import "DRCTSGetSettingsForManagedObjectBuilder.h"

/**
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen
* Do not edit the class manually.
*/

@implementation DRCTSGetSettingsForManagedObjectBuilder

-(instancetype)init {
    self = [super init];
    if (self != nil) {
       _metaBuilder = [[DRCTSGetSettingsForMetaManagedObjectBuilder alloc] init];
       _dataBuilder = [[DRCTSGetSettingsDataGlobalManagedObjectBuilder alloc] init];
    }
    return self;
}

-(DRCTSGetSettingsForManagedObject*)createNewDRCTSGetSettingsForManagedObjectInContext:(NSManagedObjectContext*)context {
    DRCTSGetSettingsForManagedObject *managedObject = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([DRCTSGetSettingsForManagedObject class]) inManagedObjectContext:context];
    return managedObject;
}

-(DRCTSGetSettingsForManagedObject*)DRCTSGetSettingsForManagedObjectFromDRCTSGetSettingsFor:(DRCTSGetSettingsFor*)object context:(NSManagedObjectContext*)context {
    DRCTSGetSettingsForManagedObject* newDRCTSGetSettingsFor = [self createNewDRCTSGetSettingsForManagedObjectInContext:context];
    [self updateDRCTSGetSettingsForManagedObject:newDRCTSGetSettingsFor withDRCTSGetSettingsFor:object];
    return newDRCTSGetSettingsFor;
}

-(void)updateDRCTSGetSettingsForManagedObject:(DRCTSGetSettingsForManagedObject*)managedObject withDRCTSGetSettingsFor:(DRCTSGetSettingsFor*)object {
    if(!managedObject || !object) {
        return;
    }
    NSManagedObjectContext* context = managedObject.managedObjectContext;

    if(!managedObject.meta) {
        managedObject.meta = [self.metaBuilder DRCTSGetSettingsForMetaManagedObjectFromDRCTSGetSettingsForMeta:object.meta context:managedObject.managedObjectContext];
    } else {
        [self.metaBuilder updateDRCTSGetSettingsForMetaManagedObject:managedObject.meta withDRCTSGetSettingsForMeta:object.meta];
    }

    if(!managedObject.data) {
        managedObject.data = [self.dataBuilder DRCTSGetSettingsDataGlobalManagedObjectFromDRCTSGetSettingsDataGlobal:object.data context:managedObject.managedObjectContext];
    } else {
        [self.dataBuilder updateDRCTSGetSettingsDataGlobalManagedObject:managedObject.data withDRCTSGetSettingsDataGlobal:object.data];
    }

}

-(DRCTSGetSettingsFor*)DRCTSGetSettingsForFromDRCTSGetSettingsForManagedObject:(DRCTSGetSettingsForManagedObject*)obj {
    if(!obj) {
        return nil;
    }
    DRCTSGetSettingsFor* newDRCTSGetSettingsFor = [[DRCTSGetSettingsFor alloc] init];
    [self updateDRCTSGetSettingsFor:newDRCTSGetSettingsFor withDRCTSGetSettingsForManagedObject:obj];
    return newDRCTSGetSettingsFor;
}

-(void)updateDRCTSGetSettingsFor:(DRCTSGetSettingsFor*)newDRCTSGetSettingsFor withDRCTSGetSettingsForManagedObject:(DRCTSGetSettingsForManagedObject*)obj {
    newDRCTSGetSettingsFor.meta = [self.metaBuilder DRCTSGetSettingsForMetaFromDRCTSGetSettingsForMetaManagedObject:obj.meta];
    newDRCTSGetSettingsFor.data = [self.dataBuilder DRCTSGetSettingsDataGlobalFromDRCTSGetSettingsDataGlobalManagedObject:obj.data];
}

@end
