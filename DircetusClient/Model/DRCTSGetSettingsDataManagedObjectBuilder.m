

#import "DRCTSGetSettingsDataManagedObjectBuilder.h"

/**
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen
* Do not edit the class manually.
*/

@implementation DRCTSGetSettingsDataManagedObjectBuilder

-(instancetype)init {
    self = [super init];
    if (self != nil) {
       _globalBuilder = [[DRCTSGetSettingsDataGlobalManagedObjectBuilder alloc] init];
       _filesBuilder = [[DRCTSGetSettingsDataFilesManagedObjectBuilder alloc] init];
    }
    return self;
}

-(DRCTSGetSettingsDataManagedObject*)createNewDRCTSGetSettingsDataManagedObjectInContext:(NSManagedObjectContext*)context {
    DRCTSGetSettingsDataManagedObject *managedObject = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([DRCTSGetSettingsDataManagedObject class]) inManagedObjectContext:context];
    return managedObject;
}

-(DRCTSGetSettingsDataManagedObject*)DRCTSGetSettingsDataManagedObjectFromDRCTSGetSettingsData:(DRCTSGetSettingsData*)object context:(NSManagedObjectContext*)context {
    DRCTSGetSettingsDataManagedObject* newDRCTSGetSettingsData = [self createNewDRCTSGetSettingsDataManagedObjectInContext:context];
    [self updateDRCTSGetSettingsDataManagedObject:newDRCTSGetSettingsData withDRCTSGetSettingsData:object];
    return newDRCTSGetSettingsData;
}

-(void)updateDRCTSGetSettingsDataManagedObject:(DRCTSGetSettingsDataManagedObject*)managedObject withDRCTSGetSettingsData:(DRCTSGetSettingsData*)object {
    if(!managedObject || !object) {
        return;
    }
    NSManagedObjectContext* context = managedObject.managedObjectContext;

    if(!managedObject.global) {
        managedObject.global = [self.globalBuilder DRCTSGetSettingsDataGlobalManagedObjectFromDRCTSGetSettingsDataGlobal:object.global context:managedObject.managedObjectContext];
    } else {
        [self.globalBuilder updateDRCTSGetSettingsDataGlobalManagedObject:managedObject.global withDRCTSGetSettingsDataGlobal:object.global];
    }

    if(!managedObject.files) {
        managedObject.files = [self.filesBuilder DRCTSGetSettingsDataFilesManagedObjectFromDRCTSGetSettingsDataFiles:object.files context:managedObject.managedObjectContext];
    } else {
        [self.filesBuilder updateDRCTSGetSettingsDataFilesManagedObject:managedObject.files withDRCTSGetSettingsDataFiles:object.files];
    }

}

-(DRCTSGetSettingsData*)DRCTSGetSettingsDataFromDRCTSGetSettingsDataManagedObject:(DRCTSGetSettingsDataManagedObject*)obj {
    if(!obj) {
        return nil;
    }
    DRCTSGetSettingsData* newDRCTSGetSettingsData = [[DRCTSGetSettingsData alloc] init];
    [self updateDRCTSGetSettingsData:newDRCTSGetSettingsData withDRCTSGetSettingsDataManagedObject:obj];
    return newDRCTSGetSettingsData;
}

-(void)updateDRCTSGetSettingsData:(DRCTSGetSettingsData*)newDRCTSGetSettingsData withDRCTSGetSettingsDataManagedObject:(DRCTSGetSettingsDataManagedObject*)obj {
    newDRCTSGetSettingsData.global = [self.globalBuilder DRCTSGetSettingsDataGlobalFromDRCTSGetSettingsDataGlobalManagedObject:obj.global];
    newDRCTSGetSettingsData.files = [self.filesBuilder DRCTSGetSettingsDataFilesFromDRCTSGetSettingsDataFilesManagedObject:obj.files];
}

@end
